name: Build Docling

on:
  release:
    types: [created]
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            artifact_name: flow-docling-linux-x64
          - os: ubuntu-24.04-arm
            artifact_name: flow-docling-linux-arm
          - os: windows-latest
            artifact_name: flow-docling-windows-x64.exe
          - os: windows-11-arm
            artifact_name: flow-docling-windows-arm.exe
          - os: macos-13
            artifact_name: flow-docling-macos-x64
          - os: macos-latest
            artifact_name: flow-docling-macos-arm64

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'
          cache-dependency-path: 'requirements*.txt'

      - name: Cache build directory
        uses: actions/cache@v3
        with:
          path: build
          key: ${{ runner.os }}-build-${{ hashFiles('./**/*.py') }}
          restore-keys: |
            ${{ runner.os }}-build-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller docling rtree

      - name: Install UPX
        run: |
          if [ "${{ runner.os }}" == "Linux" ]; then
            sudo apt-get update
            sudo apt-get install -y upx
          elif [ "${{ runner.os }}" == "macOS" ]; then
            brew install upx
          elif [ "${{ runner.os }}" == "Windows" ]; then
            choco install upx
          fi
        shell: bash

      - name: Build binary
        run: |
          pyinstaller --onefile --name flow-docling --noconfirm --upx-dir="$(which upx | xargs dirname)" --collect-all docling_parse main.py

      - name: Prepare binary for upload
        id: prepare-binary
        shell: bash
        run: |
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            cp flow-docling.exe ${{ matrix.artifact_name }}
          else
            cp flow-docling ${{ matrix.artifact_name }}
          fi
          echo "binary_path=./dist/${{ matrix.artifact_name }}" >> $GITHUB_OUTPUT

      - name: Upload binary to artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: ${{ steps.prepare-binary.outputs.binary_path }}

  release:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Get current date
        id: date
        run: echo "date=$(date +'%Y-%m-%d')" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: release-docling-${{ steps.date.outputs.date }}
          name: Automated Docling Release ${{ steps.date.outputs.date }}
          draft: false
          prerelease: false
          files: |
            artifacts/flow-docling-linux-x64/flow-docling-linux-x64
            artifacts/flow-docling-linux-arm/flow-docling-linux-arm
            artifacts/flow-docling-windows-x64.exe/flow-docling-windows-x64.exe
            artifacts/flow-docling-windows-arm.exe/flow-docling-windows-arm.exe
            artifacts/flow-docling-macos-x64/flow-docling-macos-x64
            artifacts/flow-docling-macos-arm64/flow-docling-macos-arm64
